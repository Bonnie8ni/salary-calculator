{"version":3,"sources":["Salary.js","serviceWorker.js","index.js"],"names":["Salary","state","month","startTime","Date","now","currentTime","onChangeMoth","e","_this","setState","parseInt","target","value","_this2","this","setInterval","_this$state","time","react_default","a","createElement","type","onChange","toFixed","Component","Boolean","window","location","hostname","match","render","src_Salary","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAuDeA,6MApDbC,MAAQ,CACNC,MAAO,EACPC,UAAWC,KAAKC,MAChBC,YAAaF,KAAKC,SAWpBE,aAAe,SAACC,GACdC,EAAKC,SAAS,CACZR,MAAOS,SAASH,EAAEI,OAAOC,MAAO,0FAVhB,IAAAC,EAAAC,KAClBC,YAAY,WACVF,EAAKJ,SAAS,CACZJ,YAAaF,KAAKC,SAEnB,sCASI,IAAAY,EACmCF,KAAKd,MAAvCC,EADDe,EACCf,MAAOC,EADRc,EACQd,UACTe,GAFCD,EACmBX,YACEH,GAAa,IAEzC,OACEgB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,SACLT,MAAOX,EACPqB,SAAUR,KAAKR,eAEjBY,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAAST,MAAOX,EAAQ,MACpCiB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAAST,MAAOX,EAAQ,IAAM,KAC1CiB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAAST,MAAOX,EAAQ,IAAM,GAAK,KAC/CiB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,YAAOH,EAAKM,QAAQ,IACpBL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,aAASH,EAAOhB,EAAS,IAAM,GAAK,IAAIsB,QAAQ,YA/CnCC,aCUDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,iBAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAYC,SAASC,eAAe,SD4HrC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.444e96f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Salary extends Component {\n  state = {\n    month: 0,\n    startTime: Date.now(),\n    currentTime: Date.now(),\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        currentTime: Date.now(),\n      })\n    }, 100)\n  }\n\n  onChangeMoth = (e) => {\n    this.setState({\n      month: parseInt(e.target.value, 10),\n    })\n  }\n\n  render() {\n    const { month, startTime, currentTime } = this.state;\n    const time = (currentTime - startTime) / 1000;\n\n    return (\n      <div>\n        <label>月薪</label>\n        <input\n          type=\"number\"\n          value={month}\n          onChange={this.onChangeMoth}\n        />\n        <br />\n        <label>時薪</label>\n        <input type=\"number\" value={month / 240} />\n        <br />\n        <label>分薪</label>\n        <input type=\"number\" value={month / 240 / 60} />\n        <br />\n        <label>秒薪</label>\n        <input type=\"number\" value={month / 240 / 60 / 60} />\n        <br />\n        <label>經過時間</label>\n        <span>{time.toFixed(1)}</span>\n        <br />\n        <label>偷取薪水</label>\n        <span>{((time * month) / 240 / 60 / 60).toFixed(1)}</span>\n      </div>\n    );\n  }\n}\n\nexport default Salary;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Salary from './Salary';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<Salary />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}